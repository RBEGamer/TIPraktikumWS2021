PARSER_BEGIN(wh0parser)
package de.prodevmo.w0parser;
import java.io.*;

//import de.prodevmo.*;

public class wh0parser {
    static wh0parser whi= null;
    public URMBuilder urmbi = null;

    /** Main entry point. */
  public static String parse(FileInputStream _fis_instance, String _urm_output_path) throws Exception {
        if(whi == null){
            whi = new wh0parser(_fis_instance);
        }else{
            ReInit(_fis_instance);
        }

        if(whi.urmbi == null){
            whi.urmbi = new URMBuilder();
        }

        wh0parser.program();

        //WRITE URM PROGRAM TO FILE IF PATH IS GIVEN
        if(_urm_output_path != null){
            whi.urmbi.write_urm_to_file(_urm_output_path);
        }
       return null;
  }




}


PARSER_END(wh0parser)

TOKEN :
{
	< IN: "in" > |
	< OUT: "out"> |
	< VAR: "var"> |
	< EQUALS_ASSIGN: "=" > |
	< PLUS: "+" > |
	< ZERO: "0" > |
	< ONE: "1" > |
	< NOTEQUALS: "!=" > |
	< WHILE: "while" > |
	< DO: "do" > |
	< BEGIN: "begin" > |
	< END: "end" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< LEFT_BRACKET_ROUND: "(" > |
	< RIGHT_BRACKET_ROUND: ")" > |
	< IDENT: (["a"-"z","A"-"Z"] (["0"-"9"])?)+ >
}
SKIP :
{
	" "  |
	"\t" |
	"\n" |
	"\r"
}
void program() :
{
 Token t;
 }
{
	t = <IDENT> {whi.urmbi.set_program_name(t.image);} <LEFT_BRACKET_ROUND> program_var_in() <SEMICOLON> program_var_out () <RIGHT_BRACKET_ROUND> <SEMICOLON>
	<VAR> <LEFT_BRACKET_ROUND> var_help() <RIGHT_BRACKET_ROUND> <SEMICOLON>
	sequence()
}
void program_var_in() :
{
 Token t;
 }
{
	<IN> (t= <IDENT>{ whi.urmbi.reg_reg_in(t.image); }) (<COMMA>  t =<IDENT>{whi.urmbi.reg_reg_in(t.image);})*
}
void program_var_out() :
{
Token t;
}
{
	<OUT> (t = <IDENT> {whi.urmbi.reg_reg_out(t.image);})
}
void var_help() :
{
Token t;
}
{
	(t=<IDENT>{whi.urmbi.reg_reg(t.image);} (<COMMA> t=<IDENT>{whi.urmbi.reg_reg(t.image);})*)*
}
void sequence() :
{}
{
	(variable_assign() | while_do()) (<SEMICOLON> sequence())?
}

void variable_assign() :
{}
{
    //VARx = 0 oder VARx = VARy + 1
	<IDENT> <EQUALS_ASSIGN> (<ZERO> | <IDENT> <PLUS> <ONE>)
}
void while_do() :
{}
{
    //WHILE VARx != VARy DO BEGIN sequcence END
	<WHILE> <IDENT> <NOTEQUALS> <IDENT> <DO> <BEGIN> sequence() <END>
}
